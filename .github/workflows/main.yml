# This is a basic workflow to help you get started with Actions

name: Build and Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'
      

      
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"

      
      - name: Espressif IoT Development Framework (ESP-IDF)
  # You may pin to the exact commit or the version.
  # uses: espressif/esp-idf-ci-action@146a0d2f40db5229a19360478a38812203c00161
        uses: espressif/esp-idf-ci-action@v1
        with:
    # Relative path under $GITHUB_WORKSPACE to place the repository
          path: ''
    # Version of ESP-IDF docker image to use
          esp_idf_version: v4.4
    # ESP32 variant to build for
          target: esp32
    # Command to run inside the docker container (default: builds the project)
          command: idf.py build
          

        
      
          
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 1.0.1 #${{ steps.gitversion.outputs.semVer }} ## Was: ${{ steps.versioning.outputs.version }}
          release_name: 1.0.1 # Release ${{ steps.gitversion.outputs.semVer }} # Was: ${{ steps.versioning.outputs.version }}
          body: |
            Automated Release by GitHub Action CI
          draft: false
          prerelease: true

      - name: Upload Release Asset Support Files
        id: upload-release-asset-espntrip-www
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/www.bin
          asset_name: www.bin
          asset_content_type: binary/octet-stream

      - name: Upload Release Asset esp32-xbee
        id: upload-release-asset-espntrip-xbee
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/esp32-xbee.bin
          asset_name: esp32-xbee.bin
          asset_content_type: binary/octet-stream
